class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // Initialize three pointers:
        // i points to the last element of the valid part of nums1 (m-1)
        // j points to the last element of nums2 (n-1)
        // k points to the last index of nums1 (m + n - 1), where merged result will be placed
        int i = m - 1;
        int j = n - 1;
        int k = m + n - 1;

        // While there are elements to compare in both nums1 and nums2
        while (i >= 0 && j >= 0) {
            // Compare elements from nums1 and nums2, and put the larger one at position k
            if (nums1[i] > nums2[j]) {
                nums1[k] = nums1[i];  // Place the larger element at the end of nums1
                i--;  // Move the pointer in nums1 backward
            } else {
                nums1[k] = nums2[j];  // Place the larger element at the end of nums1
                j--;  // Move the pointer in nums2 backward
            }
            k--;  // Move the result pointer backward
        }

        // If there are remaining elements in nums2, place them in nums1
        // (Note: No need to check nums1 because it's already in place)
        while (j >= 0) {
            nums1[k] = nums2[j];
            k--;
            j--;
        }
        // If there are any remaining elements in nums1, they are already in place
    }
};
